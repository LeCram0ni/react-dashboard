{
  "version": 3,
  "sources": ["../../pico-css/pico-css.js"],
  "sourcesContent": ["if (!String.prototype.replaceAll) String.prototype.replaceAll = function(str, newStr){ return this.replace(new RegExp(str, 'g'), newStr) };\n\nconst weave = (a1, a2)=>a2.reduce((acc,a,idx)=>acc.concat(a1[idx], a),[]).concat(a1[a1.length-1]);\nconst tag = (input, vals)=>(Array.isArray(input)) ? weave(input, vals).join('') : input;\n\nconst picoparse = (rules, text)=>{\n\tlet remaining = text, result = [], skip=false, pos=0;\n\twhile(remaining.length > 0){\n\t\tlet match = rules.reduce((best, [rgx, fn])=>{\n\t\t\tlet match = rgx.exec(remaining);\n\t\t\tif(!match) return best;\n\t\t\tif(!best || match.index < best.index){ match.func = fn; return match; }\n\t\t\treturn best;\n\t\t}, false);\n\t\tif(!match) break;\n\t\tconst [text, ...groups] = match;\n\t\tpos += match.index;\n\t\tconst res = match.func(groups, {text, pos, pre:remaining.substring(0,match.index)})\n\t\tif(typeof res == 'boolean'){ skip = res; }\n\t\telse if(!skip && res){ result.push(res); }\n\t\tremaining = remaining.substring(match.index + text.length);\n\t}\n\treturn result;\n};\n\nconst convertKeys = (keys)=>{\n\tlet media;\n\treturn {\n\t\tsel : keys.reduce((acc,key)=>{\n\t\t\tif(key.startsWith('@media')){\n\t\t\t\tmedia=key;\n\t\t\t\treturn acc;\n\t\t\t}\n\t\t\treturn acc.flatMap(sublist=>key.split(',').map(subkey=>sublist.concat(subkey.trim())))\n\t\t},[[]])\n\t\t\t.map(arr=>arr.join(' ').replaceAll(' &', '').replaceAll(' :', ':'))\n\t\t\t.join(','),\n\t\tmedia\n\t}\n};\n\nconst parse = (str)=>{\n\tconst parsed = picoparse([\n\t\t[/\\/\\*(\\*(?!\\/)|[^*])*\\*\\//, ()=>null],\n\t\t[/\\s*\\/\\/.*/,                ()=>null],\n\t\t[/([^{};\\s][^{};]*){/,       ([selector])=>['selc', selector.trim()]],\n\t\t[/([\\w+-]+)\\s*:\\s*([^;]+);/, ([key, val])=>['rule', key, val]],\n\t\t[/}/,                        ()=>['close']],\n\t], str);\n\n\tlet keys = [];\n\treturn parsed.reduce((acc,[type, key, val])=>{\n\t\tif(type=='selc') keys.push(key);\n\t\tif(type=='close') keys.pop();\n\t\tif(type=='rule'){\n\t\t\tconst {sel, media} = convertKeys(keys);\n\t\t\tconst last = acc[acc.length-1]||{};\n\t\t\tif(sel!=last.sel || media!=last.media){\n\t\t\t\tacc.push({sel,media,rules:{}});\n\t\t\t}\n\t\t\tif(val.indexOf('}')!==-1||val.indexOf(':')!==-1) throw new Error(`ERR: CSS parsing error near: ${sel} -> ${key}`);\n\t\t\tacc[acc.length-1].rules[key] = val;\n\t\t}\n\t\treturn acc;\n\t}, [])\n};\n\nconst toString = (selectorList)=>{\n\treturn selectorList.map(({sel, media, rules})=>{\n\t\tlet res = [], buf=media?'\\t':'';\n\t\tif(media) res.push(media+'{');\n\t\tif(sel) res.push(buf+sel+'{');\n\t\tObject.entries(rules).map(([k,v])=>res.push(`${buf}\\t${k}:${v};`))\n\t\tif(sel) res.push(buf+'}');\n\t\tif(media) res.push('}');\n\t\treturn res.join('\\n')\n\t}).join('\\n')\n}\n\nconst css = (input, ...vals)=>toString(parse(tag(input, vals)));\n\ncss.parse    = parse;\ncss.tag      = tag;\ncss.toString = toString;\ncss.inject   = (input, ...vals)=>document.head.insertAdjacentHTML('beforeend', `<style>${css(input, ...vals)}</style>`);\n\nmodule.exports = css;"],
  "mappings": "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",
  "names": ["match", "text"]
}
